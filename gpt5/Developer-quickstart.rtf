{\rtf1\ansi\ansicpg1252\cocoartf2761
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Developer quickstart\
====================\
\
Take your first steps with the OpenAI API.\
\
The OpenAI API provides a simple interface to state-of-the-art AI [models](/docs/models) for text generation, natural language processing, computer vision, and more. This example generates [text output](/docs/guides/text) from a prompt, as you might using [ChatGPT](https://chatgpt.com).\
\
Generate text from a model\
\
```javascript\
import OpenAI from "openai";\
const client = new OpenAI();\
\
const response = await client.responses.create(\{\
    model: "gpt-5",\
    input: "Write a one-sentence bedtime story about a unicorn."\
\});\
\
console.log(response.output_text);\
```\
\
```python\
from openai import OpenAI\
client = OpenAI()\
\
response = client.responses.create(\
    model="gpt-5",\
    input="Write a one-sentence bedtime story about a unicorn."\
)\
\
print(response.output_text)\
```\
\
```bash\
curl "https://api.openai.com/v1/responses" \\\
    -H "Content-Type: application/json" \\\
    -H "Authorization: Bearer $OPENAI_API_KEY" \\\
    -d '\{\
        "model": "gpt-5",\
        "input": "Write a one-sentence bedtime story about a unicorn."\
    \}'\
```\
\
[\
\
Configure your development environment\
\
Install and configure an official OpenAI SDK to run the code above.\
\
](/docs/libraries)[\
\
Responses starter app\
\
Start building with the Responses API\
\
](https://github.com/openai/openai-responses-starter-app)[\
\
Text generation and prompting\
\
Learn more about prompting, message roles, and building conversational apps.\
\
](/docs/guides/text)\
\
Analyze images and files\
------------------------\
\
Send image URLs, uploaded files, or PDF documents directly to the model to extract text, classify content, or detect visual elements.\
\
Image URL\
\
Analyze the content of an image\
\
```javascript\
import OpenAI from "openai";\
const client = new OpenAI();\
\
const response = await client.responses.create(\{\
    model: "gpt-5",\
    input: [\
        \{\
            role: "user",\
            content: [\
                \{\
                    type: "input_text",\
                    text: "What is in this image?",\
                \},\
                \{\
                    type: "input_image",\
                    image_url: "https://openai-documentation.vercel.app/images/cat_and_otter.png",\
                \},\
            ],\
        \},\
    ],\
\});\
\
console.log(response.output_text);\
```\
\
```bash\
curl "https://api.openai.com/v1/responses" \\\
    -H "Content-Type: application/json" \\\
    -H "Authorization: Bearer $OPENAI_API_KEY" \\\
    -d '\{\
        "model": "gpt-5",\
        "input": [\
            \{\
                "role": "user",\
                "content": [\
                    \{\
                        "type": "input_text",\
                        "text": "What is in this image?"\
                    \},\
                    \{\
                        "type": "input_image",\
                        "image_url": "https://openai-documentation.vercel.app/images/cat_and_otter.png"\
                    \}\
                ]\
            \}\
        ]\
    \}'\
```\
\
```python\
from openai import OpenAI\
client = OpenAI()\
\
response = client.responses.create(\
    model="gpt-5",\
    input=[\
        \{\
            "role": "user",\
            "content": [\
                \{\
                    "type": "input_text",\
                    "text": "What teams are playing in this image?",\
                \},\
                \{\
                    "type": "input_image",\
                    "image_url": "https://upload.wikimedia.org/wikipedia/commons/3/3b/LeBron_James_Layup_%28Cleveland_vs_Brooklyn_2018%29.jpg"\
                \}\
            ]\
        \}\
    ]\
)\
\
print(response.output_text)\
```\
\
File URL\
\
Use a file URL as input\
\
```bash\
curl "https://api.openai.com/v1/responses" \\\
    -H "Content-Type: application/json" \\\
    -H "Authorization: Bearer $OPENAI_API_KEY" \\\
    -d '\{\
        "model": "gpt-5",\
        "input": [\
            \{\
                "role": "user",\
                "content": [\
                    \{\
                        "type": "input_text",\
                        "text": "Analyze the letter and provide a summary of the key points."\
                    \},\
                    \{\
                        "type": "input_file",\
                        "file_url": "https://www.berkshirehathaway.com/letters/2024ltr.pdf"\
                    \}\
                ]\
            \}\
        ]\
    \}'\
```\
\
```javascript\
import OpenAI from "openai";\
const client = new OpenAI();\
\
const response = await client.responses.create(\{\
    model: "gpt-5",\
    input: [\
        \{\
            role: "user",\
            content: [\
                \{\
                    type: "input_text",\
                    text: "Analyze the letter and provide a summary of the key points.",\
                \},\
                \{\
                    type: "input_file",\
                    file_url: "https://www.berkshirehathaway.com/letters/2024ltr.pdf",\
                \},\
            ],\
        \},\
    ],\
\});\
\
console.log(response.output_text);\
```\
\
```python\
from openai import OpenAI\
client = OpenAI()\
\
response = client.responses.create(\
    model="gpt-5",\
    input=[\
        \{\
            "role": "user",\
            "content": [\
                \{\
                    "type": "input_text",\
                    "text": "Analyze the letter and provide a summary of the key points.",\
                \},\
                \{\
                    "type": "input_file",\
                    "file_url": "https://www.berkshirehathaway.com/letters/2024ltr.pdf",\
                \},\
            ],\
        \},\
    ]\
)\
\
print(response.output_text)\
```\
\
Upload file\
\
Upload a file and use it as input\
\
```bash\
curl https://api.openai.com/v1/files \\\
    -H "Authorization: Bearer $OPENAI_API_KEY" \\\
    -F purpose="user_data" \\\
    -F file="@draconomicon.pdf"\
\
curl "https://api.openai.com/v1/responses" \\\
    -H "Content-Type: application/json" \\\
    -H "Authorization: Bearer $OPENAI_API_KEY" \\\
    -d '\{\
        "model": "gpt-5",\
        "input": [\
            \{\
                "role": "user",\
                "content": [\
                    \{\
                        "type": "input_file",\
                        "file_id": "file-6F2ksmvXxt4VdoqmHRw6kL"\
                    \},\
                    \{\
                        "type": "input_text",\
                        "text": "What is the first dragon in the book?"\
                    \}\
                ]\
            \}\
        ]\
    \}'\
```\
\
```javascript\
import fs from "fs";\
import OpenAI from "openai";\
const client = new OpenAI();\
\
const file = await client.files.create(\{\
    file: fs.createReadStream("draconomicon.pdf"),\
    purpose: "user_data",\
\});\
\
const response = await client.responses.create(\{\
    model: "gpt-5",\
    input: [\
        \{\
            role: "user",\
            content: [\
                \{\
                    type: "input_file",\
                    file_id: file.id,\
                \},\
                \{\
                    type: "input_text",\
                    text: "What is the first dragon in the book?",\
                \},\
            ],\
        \},\
    ],\
\});\
\
console.log(response.output_text);\
```\
\
```python\
from openai import OpenAI\
client = OpenAI()\
\
file = client.files.create(\
    file=open("draconomicon.pdf", "rb"),\
    purpose="user_data"\
)\
\
response = client.responses.create(\
    model="gpt-5",\
    input=[\
        \{\
            "role": "user",\
            "content": [\
                \{\
                    "type": "input_file",\
                    "file_id": file.id,\
                \},\
                \{\
                    "type": "input_text",\
                    "text": "What is the first dragon in the book?",\
                \},\
            ]\
        \}\
    ]\
)\
\
print(response.output_text)\
```\
\
[\
\
Image inputs guide\
\
Learn to use image inputs to the model and extract meaning from images.\
\
](/docs/guides/images)[\
\
File inputs guide\
\
Learn to use file inputs to the model and extract meaning from documents.\
\
](/docs/guides/pdf-files)\
\
Extend the model with tools\
---------------------------\
\
Give the model access to external data and functions by attaching [tools](/docs/guides/tools). Use built-in tools like web search or file search, or define your own for calling APIs, running code, or integrating with third-party systems.\
\
Web search\
\
Use web search in a response\
\
```javascript\
import OpenAI from "openai";\
const client = new OpenAI();\
\
const response = await client.responses.create(\{\
    model: "gpt-5",\
    tools: [\
        \{ type: "web_search_preview" \},\
    ],\
    input: "What was a positive news story from today?",\
\});\
\
console.log(response.output_text);\
```\
\
```python\
from openai import OpenAI\
client = OpenAI()\
\
response = client.responses.create(\
    model="gpt-5",\
    tools=[\{"type": "web_search_preview"\}],\
    input="What was a positive news story from today?"\
)\
\
print(response.output_text)\
```\
\
```bash\
curl "https://api.openai.com/v1/responses" \\\
    -H "Content-Type: application/json" \\\
    -H "Authorization: Bearer $OPENAI_API_KEY" \\\
    -d '\{\
        "model": "gpt-5",\
        "tools": [\{"type": "web_search_preview"\}],\
        "input": "what was a positive news story from today?"\
    \}'\
```\
\
File search\
\
Search your files in a response\
\
```python\
from openai import OpenAI\
client = OpenAI()\
\
response = client.responses.create(\
    model="gpt-4.1",\
    input="What is deep research by OpenAI?",\
    tools=[\{\
        "type": "file_search",\
        "vector_store_ids": ["<vector_store_id>"]\
    \}]\
)\
print(response)\
```\
\
```javascript\
import OpenAI from "openai";\
const openai = new OpenAI();\
\
const response = await openai.responses.create(\{\
    model: "gpt-4.1",\
    input: "What is deep research by OpenAI?",\
    tools: [\
        \{\
            type: "file_search",\
            vector_store_ids: ["<vector_store_id>"],\
        \},\
    ],\
\});\
console.log(response);\
```\
\
Function calling\
\
Call your own function\
\
```javascript\
import OpenAI from "openai";\
const client = new OpenAI();\
\
const tools = [\
    \{\
        type: "function",\
        name: "get_weather",\
        description: "Get current temperature for a given location.",\
        parameters: \{\
            type: "object",\
            properties: \{\
                location: \{\
                    type: "string",\
                    description: "City and country e.g. Bogot\'e1, Colombia",\
                \},\
            \},\
            required: ["location"],\
            additionalProperties: false,\
        \},\
        strict: true,\
    \},\
];\
\
const response = await client.responses.create(\{\
    model: "gpt-5",\
    input: [\
        \{ role: "user", content: "What is the weather like in Paris today?" \},\
    ],\
    tools,\
\});\
\
console.log(response.output[0].to_json());\
```\
\
```python\
from openai import OpenAI\
\
client = OpenAI()\
\
tools = [\
    \{\
        "type": "function",\
        "name": "get_weather",\
        "description": "Get current temperature for a given location.",\
        "parameters": \{\
            "type": "object",\
            "properties": \{\
                "location": \{\
                    "type": "string",\
                    "description": "City and country e.g. Bogot\'e1, Colombia",\
                \}\
            \},\
            "required": ["location"],\
            "additionalProperties": False,\
        \},\
        "strict": True,\
    \},\
]\
\
response = client.responses.create(\
    model="gpt-5",\
    input=[\
        \{"role": "user", "content": "What is the weather like in Paris today?"\},\
    ],\
    tools=tools,\
)\
\
print(response.output[0].to_json())\
```\
\
```bash\
curl -X POST https://api.openai.com/v1/responses \\\
  -H "Authorization: Bearer $OPENAI_API_KEY" \\\
  -H "Content-Type: application/json" \\\
  -d '\{\
    "model": "gpt-5",\
    "input": [\
      \{"role": "user", "content": "What is the weather like in Paris today?"\}\
    ],\
    "tools": [\
      \{\
        "type": "function",\
        "name": "get_weather",\
        "description": "Get current temperature for a given location.",\
        "parameters": \{\
          "type": "object",\
          "properties": \{\
            "location": \{\
              "type": "string",\
              "description": "City and country e.g. Bogot\'e1, Colombia"\
            \}\
          \},\
          "required": ["location"],\
          "additionalProperties": false\
        \},\
        "strict": true\
      \}\
    ]\
  \}'\
```\
\
Remote MCP\
\
Call a remote MCP server\
\
```bash\
curl https://api.openai.com/v1/responses \\\
  -H "Content-Type: application/json" \\\
  -H "Authorization: Bearer $OPENAI_API_KEY" \\\
  -d '\{\
  "model": "gpt-4.1",\
  "tools": [\
    \{\
      "type": "mcp",\
      "server_label": "deepwiki",\
      "server_url": "https://mcp.deepwiki.com/mcp",\
      "require_approval": "never"\
    \}\
  ],\
  "input": "What transport protocols are supported in the 2025-03-26 version of the MCP spec?"\
\}'\
```\
\
```javascript\
import OpenAI from "openai";\
const client = new OpenAI();\
\
const resp = await client.responses.create(\{\
    model: "gpt-4.1",\
    tools: [\
        \{\
            type: "mcp",\
            server_label: "deepwiki",\
            server_url: "https://mcp.deepwiki.com/mcp",\
            require_approval: "never",\
        \},\
    ],\
    input: "What transport protocols are supported in the 2025-03-26 version of the MCP spec?",\
\});\
\
console.log(resp.output_text);\
```\
\
```python\
from openai import OpenAI\
\
client = OpenAI()\
\
resp = client.responses.create(\
    model="gpt-4.1",\
    tools=[\
        \{\
            "type": "mcp",\
            "server_label": "deepwiki",\
            "server_url": "https://mcp.deepwiki.com/mcp",\
            "require_approval": "never",\
        \},\
    ],\
    input="What transport protocols are supported in the 2025-03-26 version of the MCP spec?",\
)\
\
print(resp.output_text)\
```\
\
[\
\
Use built-in tools\
\
Learn about powerful built-in tools like web search and file search.\
\
](/docs/guides/tools)[\
\
Function calling guide\
\
Learn to enable the model to call your own custom code.\
\
](/docs/guides/function-calling)\
\
Stream responses and build realtime apps\
----------------------------------------\
\
Use server\uc0\u8209 sent [streaming events](/docs/guides/streaming-responses) to show results as they\'92re generated, or the [Realtime API](/docs/guides/realtime) for interactive voice and multimodal apps.\
\
Stream server-sent events from the API\
\
```javascript\
import \{ OpenAI \} from "openai";\
const client = new OpenAI();\
\
const stream = await client.responses.create(\{\
    model: "gpt-5",\
    input: [\
        \{\
            role: "user",\
            content: "Say 'double bubble bath' ten times fast.",\
        \},\
    ],\
    stream: true,\
\});\
\
for await (const event of stream) \{\
    console.log(event);\
\}\
```\
\
```python\
from openai import OpenAI\
client = OpenAI()\
\
stream = client.responses.create(\
    model="gpt-5",\
    input=[\
        \{\
            "role": "user",\
            "content": "Say 'double bubble bath' ten times fast.",\
        \},\
    ],\
    stream=True,\
)\
\
for event in stream:\
    print(event)\
```\
\
[\
\
Use streaming events\
\
Use server-sent events to stream model responses to users fast.\
\
](/docs/guides/streaming-responses)[\
\
Get started with the Realtime API\
\
Use WebRTC or WebSockets for super fast speech-to-speech AI apps.\
\
](/docs/guides/realtime)\
\
Build agents\
------------\
\
Use the OpenAI platform to build [agents](/docs/guides/agents) capable of taking action\'97like [controlling computers](/docs/guides/tools-computer-use)\'97on behalf of your users. Use the Agents SDK for [Python](https://openai.github.io/openai-agents-python) or [TypeScript](https://openai.github.io/openai-agents-js) to create orchestration logic on the backend.\
\
Build a language triage agent\
\
```javascript\
import \{ Agent, run \} from '@openai/agents';\
\
const spanishAgent = new Agent(\{\
    name: 'Spanish agent',\
    instructions: 'You only speak Spanish.',\
\});\
\
const englishAgent = new Agent(\{\
    name: 'English agent',\
    instructions: 'You only speak English',\
\});\
\
const triageAgent = new Agent(\{\
    name: 'Triage agent',\
    instructions:\
        'Handoff to the appropriate agent based on the language of the request.',\
    handoffs: [spanishAgent, englishAgent],\
\});\
\
const result = await run(triageAgent, 'Hola, \'bfc\'f3mo est\'e1s?');\
console.log(result.finalOutput);\
```\
\
```python\
from agents import Agent, Runner\
import asyncio\
\
spanish_agent = Agent(\
    name="Spanish agent",\
    instructions="You only speak Spanish.",\
)\
\
english_agent = Agent(\
    name="English agent",\
    instructions="You only speak English",\
)\
\
triage_agent = Agent(\
    name="Triage agent",\
    instructions="Handoff to the appropriate agent based on the language of the request.",\
    handoffs=[spanish_agent, english_agent],\
)\
\
async def main():\
    result = await Runner.run(triage_agent, input="Hola, \'bfc\'f3mo est\'e1s?")\
    print(result.final_output)\
\
if __name__ == "__main__":\
    asyncio.run(main())\
```\
\
[\
\
Build agents that can take action\
\
Learn how to use the OpenAI platform to build powerful, capable AI agents.\
\
](/docs/guides/agents)\
\
Was this page useful?}